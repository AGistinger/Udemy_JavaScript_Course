FORKIFY MODERN APPLICATION
Searching for recipes and displaying them in the UI

// Project Overview and Planning //
User story: Description of the application's functionality from the user's perspecive.
Common format: As a [type of user], I want [an action] so that [a benefit]

// User Stories //
 1) As a user, I want to search for recipes, so that I can find new ideas for meals.
 2) As a user, I want to be able to update the number of servings, so that I can cook a meal
    for different number of people.
 3) As a user, I want to bookmark recipes, so that I can review them later.
 4) As a user, I want to beable to create my own recipes, so that I have them all 
    organized in the same app.
 5) As a user, I want to be able to see my bookmarks and own recipes when I leave the app
    and come bakc later, so that I can close the app safely after cooking.

// Features //
 1) Search functionality: input field to send request to API with searched keywords.
   * Display results with pagination
   * Display recipe with cooking time, servings and ingredients
 2) Change servings functionality: update all ingredients according to the current number
    of servings.
 3) Bookmarking functionality: display a list of all bookmarked recipes
 4) User can upload own recipes
   * User recipes will automatically be bookmarked
   * User can only see their own recipes, not recipes from other users
 5) Store bookmark data in the browser using local storage
   * On page load, read saved bookmarks from local storage and display

// Why Worry About Architecture? //
The perfect archetecture gives a project Structure, Maintanability, and Expandability
 - Like a house, software needs a structure: the way we organize the code.
 - A project is never done!  We need to be able to easily change it in the future.
 - We also need to be able to easily add new features.
 - We can use a well-established archetecture pattern like MVC (model view controller) MVC, 
   MVP, Flux, etc.  (this project).
 - We can use a framework like React, Angular, Vue, Svelte, etc.

Components of Any Architecture
 - Business Logic:
   * Code that solves the actual business problem.
   * Directly related to what business does and what it needs.
   * Example: sending messages, storing transactions, calculating taxes, etc.
 - State:
   * Essentially stores all the data about the application.
   * Should be the "single source of truth".
   * UI should be kept in sync with the state.
   * State libraries exist, ex) redux, mobx
 - Http Library:
   * Responsible for making and receiving AJAX requests.
   * Optional but almost always necessary in real-world apps.
 - Applicaiton Logic (Router):
   * Code that is only concerned abou tthe implementation of application itself.
   * Handles navigation and UI events.
 - Presentation Logic (UI Layer):
   * Code that concerned about the visible part of the application.
   * Essentially displays the application state.

The Model-View-Controller (MVC) Architecture
 - Model
   * Business logic
   * State
   * HTTP library
 - Controller
   * Application logic
   * Bridge between the model adn the views (which don't know about one another).
 - View
   * Presentation logic

Improvement Ideas:
- Display number of pages between the pagination buttons
- Ability to sort search results by the duration of number of ingredients
- Perform ingredient validation in view, before submitting the form
- Improve recipe ingredient input: separate in multiple fields and allow more than 6 ingredients

Feature Ideas:
- Shopping list feature: button on recipe to add ingredients to a list
- Weekly meal planning feature: assign recipes to the next 7 days and show them on a weekly calendar
- Get nutrition data: on each ingredient from spoonacular API (https://spoonacular.com/food-api) and
  calculate total calories of recipe.